{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Me","text":""},{"location":"#hi-there","title":"Hi there \ud83d\udc4b","text":"<p>I am Developer at heart, currently working as Principal Customer Engineer at Microsoft</p> <p>Working with different customers across Nordics, helping them to make best use of Cloud native technologies and accelerate  their journey to cloud. In my spare time, I enjoy running into the woods and love to learn new technical skills.  I am quite passionate about DevOps and serverless technologies in general.</p> <p> ::  :: </p>"},{"location":"blogs/","title":"Developer Blog","text":""},{"location":"blogs/#aws-nordics-office-hours-continuous-delivery-for-aws-cdk-applications-with-cdk-pipelines","title":"AWS Nordics Office Hours - Continuous delivery for AWS CDK applications with CDK Pipelines","text":""},{"location":"blogs/#aws-nordics-office-hours-simplifying-serverless-best-practices-with-aws-lambda-powertools","title":"AWS Nordics Office Hours - Simplifying serverless best practices with AWS Lambda Powertools","text":""},{"location":"blogs/#create-an-http-api-endpoint-that-calls-a-lambda-function-to-rds-proxy","title":"Create an HTTP API endpoint that calls a Lambda function to RDS Proxy","text":"<p>Sets up an API Gateway HTTP API endpoint with an AWS Lambda function as an integration. The Lambda function integrates with RDS Proxy to query the RDS Aurora (MySQL) relational database.</p>"},{"location":"blogs/#packaging-and-deploying-aws-lambda-functions-written-in-java-with-aws-cloud-development-kit","title":"Packaging and deploying AWS Lambda functions written in Java with AWS Cloud Development Kit","text":"<p>Many Java applications use Apache Maven or Gradle for building and managing the project. These tools help map how to build a particular piece of software, along with its different dependencies. In almost every scenario, these applications will depend on several external dependencies/libraries. AWS Lambda functions written in Java also use these tools for packaging software.</p> <p>In this article, we\u2019ll show how to build and package Lambda functions written in Java with external dependencies via AWS CDK.</p>"},{"location":"blogs/#automating-mutual-tls-setup-for-amazon-api-gateway","title":"Automating mutual TLS setup for Amazon API Gateway","text":"<p>In September 2020, Amazon API Gateway announced support for mutual Transport Layer Security (TLS) authentication. This  is a new method for client-to-server authentication that can be used with API Gateway\u2019s existing authorization options.  Mutual TLS (mTLS) is an extension of Transport Layer Security(TLS), requiring both the server and client to verify each other.</p> <p>This post covers automating the mTLS setup for API Gateway HTTP APIs</p>"},{"location":"blogs/#simplifying-serverless-best-practices-with-aws-lambda-powertools-java","title":"Simplifying serverless best practices with AWS Lambda Powertools Java","text":"<p>Modern applications are increasingly relying on compute platforms based on serverless technologies to provide  scalability, cost efficiency, and agility. Distributed architectures have unlocked many benefits, and they have introduced new complexities in how the applications operate. With traditional architectures, debugging was as straightforward as  logging into the server and inspecting the logs. Modern observability must respond to the complexity of microservices  architectures, the increased frequency of software deployments, and the short-lived nature of AWS Lambda execution environments.</p> <p>This post shows capabilities of Lambda Powertools Java. It comes with a set of community-built utilities, in addition to the previously mentioned core utilities.</p>"},{"location":"blogs/#shipshape-shipping-guide","title":"Shipshape Shipping Guide","text":"<p>Shipping Guide is one of our oldest applications. As part of a large internal project we knew we were going to do quite a few changes to it.  The project was born on the 26th of September 2008. Since then 91 people have worked on the project, contributing 17863 commits to the master branch. Our team had little experience with the project and making large changes across the codebase seemed like a daunting task.</p> <p>In this post I walk you through how we modernized a legacy application.</p>"},{"location":"blogs/#alerting-in-grafana","title":"Alerting in grafana","text":"<p>As mentioned in our previous blog, We at bring, use influx and grafana extensively, as one of the monitoring tools to  collect statistics and visualize different aspects of application's performance.</p> <p>We have been quite excited with the latest version of grafana, which now provides alerting engine, which we can set up  alert rules on the statistics that we collect all over.</p>"},{"location":"code/","title":"Open Source Projects","text":""},{"location":"code/#azure-samplesserverless-webapp-kotlin","title":"Azure-Samples/serverless-webapp-kotlin","text":"<p>Use Azure Serverless stack to build a full-fledged web application with both backend and frontend hosted inside a same mono repo.</p> <p>CI/CD pipeline is implemented using GitHub actions for both backend and frontend app including related serverless cloud infrastructure for  backend and frontend. Infrastructure as code(IAC) for both frontend and backend infra is written using Bicep</p> <p>Application builds a React static web app, which talks to a bunch of APIs hosted via Azure API Management and talking to azure functions written in kotlin, Azure storage and Azure Cosmo DB and Azure Cognitive services as backends. Feature of web application itself is simple. Since that is not the main purpose here. User can basically upload an image with a metadata. Then if user want, they can try uploading another image from another flow, and try to find face in it. If it's found in Cosmo DB, then we return the metadata.</p>"},{"location":"code/#aws-samplesaws-appconfig-codepipeline-cdk","title":"aws-samples/aws-appconfig-codepipeline-cdk","text":"<p>This sample application demos setup of AWS AppConfig using AWS CDK. AWS AppConfig application is  set up to use AWS CodePipeline as configuration store. It also sets up AWS Lambda validator to validate  the configuration.</p> <p>In addition, the project can set up a basic serverless api using Amazon API Gateway backed by AWS Lambda which makes use of AWS AppConfig Lambda extension to query hosted configuration.</p> <p>Kotlin is used as language runtime to set up both the cdk application and needed lambda functions.</p>"},{"location":"code/#aws-lambda-powertools-java","title":"aws-lambda-powertools-java","text":"<p>Powertools is a suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and  creating custom metrics asynchronously easier.</p>"},{"location":"code/#aws-samplesserverless-rds-proxy-demo","title":"aws-samples/serverless-rds-proxy-demo","text":"<p>This project demos benefits of using RDS proxy with serverless workload which depends on relational database like RDS Aurora. Project shows end to end automated setup of RDS Aurora(Mysql) with RDS proxy. Basic serverless architecture is set up using API gateway HTTP API and Lambda Functions.</p> <p>Project sets up two endpoints with HTTP API, one which talks directly to RDS Aurora cluster and the other which talks via RDS Proxy. It provides load testing setup to measure the benefits of using RDS proxy in terms of connection pooling and elasticity.</p>"},{"location":"code/#aws-samplesecs-windows-ci-cd-blue-green","title":"aws-samples/ecs-windows-ci-cd-blue-green","text":"<p>This project sets up a Windows based ECS Cluster using capacity provider auto-scaling with fully automated Blue/Green deployment powered by AWS Code Deploy. All you need to pass is your ECR repo name where the image resides in cdk.json via <code>imageRepository</code> property.</p>"},{"location":"code/#cookiecutter-aws-sam-powertools-java","title":"cookiecutter-aws-sam-powertools-java","text":"<p>This is a Cookiecutter template to create a Serverless App based on Serverless Application Model (SAM) and Java with Lambda Powertools Java.</p>"},{"location":"code/#aws-samplesserverless-webapp-mono-repo-ci-cd-java","title":"aws-samples/serverless-webapp-mono-repo-ci-cd-java","text":"<p>Use AWS Serverless stack to build a full fledged web application with both backend and frontend hosted inside a same  mono repo. Backend CI/CD pipeline and backend infrastructure is written using SAM. Frontend CI/CD pipeline and  infrastructure is written using CDK Java.</p> <p>Application builds a React static web app, which talks to a bunch of APIs hosted via API gateway and talking to lambda  functions, S3 and dynamoDB as backends. Feature of web application itself is simple. Since that is not the main purpose  here. User can basically upload an image with a metadata. Then if user want, they can try uploading another image from  another flow, and try to find face in it. If it's found in Dynamo DB, then we return the metadata.</p>"},{"location":"code/#aws-samplesapi-gateway-auth","title":"aws-samples/api-gateway-auth","text":"<p>This sample application showcases how to set up and automate different types of authentication supported by  Amazon API Gateway HTTP API via AWS SAM.</p> <p>This SAM app uses java as language runtime for the lambda functions and custom resources.</p>"},{"location":"code/#aws-samplescdk-lambda-packaging-java","title":"aws-samples/cdk-lambda-packaging-java","text":"<p>This sample application show how you can use AWS Cloud Development Kit(AWS CDK) to deploy a AWS lambda functions with  external dependencies. AWS Serverless Application Model (AWS SAM) takes care of building and packaging lambda function  with external dependencies out of the box. It was not possible this with AWS CDK until s3-assets  was introduced.</p>"},{"location":"code/#pankajagrawal16aws-ag-client","title":"pankajagrawal16/aws-ag-client","text":"<p>This Java repo demonstrates how to make IAM authenticated call to AWS api gateway endpoint. It is set up as a maven  project currently and uses the AWS java SDK under the hood to provide simple wrapper classes to make these calls.</p>"}]}