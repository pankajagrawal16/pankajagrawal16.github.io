{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hi there \ud83d\udc4b \u00b6 I am Developer at heart, working as Senior Solutions Architect, Amazon web services . Currently, working with different customers across Nordics, helping them to make best use of AWS services and accelerate their journey to cloud. In my spare time, I enjoy running into the woods and love to learn new technical skills. I am quite passionate about DevOps and serverless technologies in general. :: ::","title":"About Me"},{"location":"#hi-there","text":"I am Developer at heart, working as Senior Solutions Architect, Amazon web services . Currently, working with different customers across Nordics, helping them to make best use of AWS services and accelerate their journey to cloud. In my spare time, I enjoy running into the woods and love to learn new technical skills. I am quite passionate about DevOps and serverless technologies in general. :: ::","title":"Hi there \ud83d\udc4b"},{"location":"blogs/","text":"Developer Blog \u00b6 AWS Nordics Office Hours - Simplifying serverless best practices with AWS Lambda Powertools \u00b6 Create an HTTP API endpoint that calls a Lambda function to RDS Proxy \u00b6 Sets up an API Gateway HTTP API endpoint with an AWS Lambda function as an integration. The Lambda function integrates with RDS Proxy to query the RDS Aurora (MySQL) relational database. Packaging and deploying AWS Lambda functions written in Java with AWS Cloud Development Kit \u00b6 Many Java applications use Apache Maven or Gradle for building and managing the project. These tools help map how to build a particular piece of software, along with its different dependencies. In almost every scenario, these applications will depend on several external dependencies/libraries. AWS Lambda functions written in Java also use these tools for packaging software. In this article, we\u2019ll show how to build and package Lambda functions written in Java with external dependencies via AWS CDK. Automating mutual TLS setup for Amazon API Gateway \u00b6 In September 2020, Amazon API Gateway announced support for mutual Transport Layer Security (TLS) authentication. This is a new method for client-to-server authentication that can be used with API Gateway\u2019s existing authorization options. Mutual TLS (mTLS) is an extension of Transport Layer Security(TLS), requiring both the server and client to verify each other. This post covers automating the mTLS setup for API Gateway HTTP APIs Simplifying serverless best practices with AWS Lambda Powertools Java \u00b6 Modern applications are increasingly relying on compute platforms based on serverless technologies to provide scalability, cost efficiency, and agility. Distributed architectures have unlocked many benefits, and they have introduced new complexities in how the applications operate. With traditional architectures, debugging was as straightforward as logging into the server and inspecting the logs. Modern observability must respond to the complexity of microservices architectures, the increased frequency of software deployments, and the short-lived nature of AWS Lambda execution environments. This post shows capabilities of Lambda Powertools Java. It comes with a set of community-built utilities, in addition to the previously mentioned core utilities. Shipshape Shipping Guide \u00b6 Shipping Guide is one of our oldest applications. As part of a large internal project we knew we were going to do quite a few changes to it. The project was born on the 26th of September 2008. Since then 91 people have worked on the project, contributing 17863 commits to the master branch. Our team had little experience with the project and making large changes across the codebase seemed like a daunting task. In this post I walk you through how we modernized a legacy application. Alerting in grafana \u00b6 As mentioned in our previous blog, We at bring, use influx and grafana extensively, as one of the monitoring tools to collect statistics and visualize different aspects of application's performance. We have been quite excited with the latest version of grafana, which now provides alerting engine, which we can set up alert rules on the statistics that we collect all over.","title":"Technical Blogs"},{"location":"blogs/#developer-blog","text":"","title":"Developer Blog"},{"location":"blogs/#aws-nordics-office-hours-simplifying-serverless-best-practices-with-aws-lambda-powertools","text":"","title":"AWS Nordics Office Hours - Simplifying serverless best practices with AWS Lambda Powertools"},{"location":"blogs/#create-an-http-api-endpoint-that-calls-a-lambda-function-to-rds-proxy","text":"Sets up an API Gateway HTTP API endpoint with an AWS Lambda function as an integration. The Lambda function integrates with RDS Proxy to query the RDS Aurora (MySQL) relational database.","title":"Create an HTTP API endpoint that calls a Lambda function to RDS Proxy"},{"location":"blogs/#packaging-and-deploying-aws-lambda-functions-written-in-java-with-aws-cloud-development-kit","text":"Many Java applications use Apache Maven or Gradle for building and managing the project. These tools help map how to build a particular piece of software, along with its different dependencies. In almost every scenario, these applications will depend on several external dependencies/libraries. AWS Lambda functions written in Java also use these tools for packaging software. In this article, we\u2019ll show how to build and package Lambda functions written in Java with external dependencies via AWS CDK.","title":"Packaging and deploying AWS Lambda functions written in Java with AWS Cloud Development Kit"},{"location":"blogs/#automating-mutual-tls-setup-for-amazon-api-gateway","text":"In September 2020, Amazon API Gateway announced support for mutual Transport Layer Security (TLS) authentication. This is a new method for client-to-server authentication that can be used with API Gateway\u2019s existing authorization options. Mutual TLS (mTLS) is an extension of Transport Layer Security(TLS), requiring both the server and client to verify each other. This post covers automating the mTLS setup for API Gateway HTTP APIs","title":"Automating mutual TLS setup for Amazon API Gateway"},{"location":"blogs/#simplifying-serverless-best-practices-with-aws-lambda-powertools-java","text":"Modern applications are increasingly relying on compute platforms based on serverless technologies to provide scalability, cost efficiency, and agility. Distributed architectures have unlocked many benefits, and they have introduced new complexities in how the applications operate. With traditional architectures, debugging was as straightforward as logging into the server and inspecting the logs. Modern observability must respond to the complexity of microservices architectures, the increased frequency of software deployments, and the short-lived nature of AWS Lambda execution environments. This post shows capabilities of Lambda Powertools Java. It comes with a set of community-built utilities, in addition to the previously mentioned core utilities.","title":"Simplifying serverless best practices with AWS Lambda Powertools Java"},{"location":"blogs/#shipshape-shipping-guide","text":"Shipping Guide is one of our oldest applications. As part of a large internal project we knew we were going to do quite a few changes to it. The project was born on the 26th of September 2008. Since then 91 people have worked on the project, contributing 17863 commits to the master branch. Our team had little experience with the project and making large changes across the codebase seemed like a daunting task. In this post I walk you through how we modernized a legacy application.","title":"Shipshape Shipping Guide"},{"location":"blogs/#alerting-in-grafana","text":"As mentioned in our previous blog, We at bring, use influx and grafana extensively, as one of the monitoring tools to collect statistics and visualize different aspects of application's performance. We have been quite excited with the latest version of grafana, which now provides alerting engine, which we can set up alert rules on the statistics that we collect all over.","title":"Alerting in grafana"},{"location":"code/","text":"Open Source Projects \u00b6 serverless-rds-proxy-demo \u00b6 This project demos benefits of using RDS proxy with serverless workload which depends on relational database like RDS Aurora. Project shows end to end automated setup of RDS Aurora(Mysql) with RDS proxy. Basic serverless architecture is set up using API gateway HTTP API and Lambda Functions. Project sets up two endpoints with HTTP API, one which talks directly to RDS Aurora cluster and the other which talks via RDS Proxy. It provides load testing setup to measure the benefits of using RDS proxy in terms of connection pooling and elasticity. ecs-windows-ci-cd-blue-green \u00b6 This project sets up a Windows based ECS Cluster using capacity provider auto-scaling with fully automated Blue/Green deployment powered by AWS Code Deploy. All you need to pass is your ECR repo name where the image resides in cdk.json via imageRepository property. aws-lambda-powertools-java \u00b6 Powertools is a suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and creating custom metrics asynchronously easier. serverless-webapp-mono-repo-ci-cd-java \u00b6 Use AWS Serverless stack to build a full fledged web application with both backend and frontend hosted inside a same mono repo. Backend CI/CD pipeline and backend infrastructure is written using SAM. Frontend CI/CD pipeline and infrastructure is written using CDK Java. Application builds a React static web app, which talks to a bunch of APIs hosted via API gateway and talking to lambda functions, S3 and dynamoDB as backends. Feature of web application itself is simple. Since that is not the main purpose here. User can basically upload an image with a metadata. Then if user want, they can try uploading another image from another flow, and try to find face in it. If it's found in Dynamo DB, then we return the metadata. api-gateway-auth \u00b6 This sample application showcases how to set up and automate different types of authentication supported by Amazon API Gateway HTTP API via AWS SAM. This SAM app uses java as language runtime for the lambda functions and custom resources. cdk-lambda-packaging-java \u00b6 This sample application show how you can use AWS Cloud Development Kit(AWS CDK) to deploy a AWS lambda functions with external dependencies. AWS Serverless Application Model (AWS SAM) takes care of building and packaging lambda function with external dependencies out of the box. It was not possible this with AWS CDK until s3-assets was introduced. aws-ag-client \u00b6 This Java repo demonstrates how to make IAM authenticated call to AWS api gateway endpoint. It is set up as a maven project currently and uses the AWS java SDK under the hood to provide simple wrapper classes to make these calls.","title":"Open Source Projects"},{"location":"code/#open-source-projects","text":"","title":"Open Source Projects"},{"location":"code/#serverless-rds-proxy-demo","text":"This project demos benefits of using RDS proxy with serverless workload which depends on relational database like RDS Aurora. Project shows end to end automated setup of RDS Aurora(Mysql) with RDS proxy. Basic serverless architecture is set up using API gateway HTTP API and Lambda Functions. Project sets up two endpoints with HTTP API, one which talks directly to RDS Aurora cluster and the other which talks via RDS Proxy. It provides load testing setup to measure the benefits of using RDS proxy in terms of connection pooling and elasticity.","title":" serverless-rds-proxy-demo"},{"location":"code/#ecs-windows-ci-cd-blue-green","text":"This project sets up a Windows based ECS Cluster using capacity provider auto-scaling with fully automated Blue/Green deployment powered by AWS Code Deploy. All you need to pass is your ECR repo name where the image resides in cdk.json via imageRepository property.","title":" ecs-windows-ci-cd-blue-green"},{"location":"code/#aws-lambda-powertools-java","text":"Powertools is a suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and creating custom metrics asynchronously easier.","title":" aws-lambda-powertools-java"},{"location":"code/#serverless-webapp-mono-repo-ci-cd-java","text":"Use AWS Serverless stack to build a full fledged web application with both backend and frontend hosted inside a same mono repo. Backend CI/CD pipeline and backend infrastructure is written using SAM. Frontend CI/CD pipeline and infrastructure is written using CDK Java. Application builds a React static web app, which talks to a bunch of APIs hosted via API gateway and talking to lambda functions, S3 and dynamoDB as backends. Feature of web application itself is simple. Since that is not the main purpose here. User can basically upload an image with a metadata. Then if user want, they can try uploading another image from another flow, and try to find face in it. If it's found in Dynamo DB, then we return the metadata.","title":" serverless-webapp-mono-repo-ci-cd-java"},{"location":"code/#api-gateway-auth","text":"This sample application showcases how to set up and automate different types of authentication supported by Amazon API Gateway HTTP API via AWS SAM. This SAM app uses java as language runtime for the lambda functions and custom resources.","title":" api-gateway-auth"},{"location":"code/#cdk-lambda-packaging-java","text":"This sample application show how you can use AWS Cloud Development Kit(AWS CDK) to deploy a AWS lambda functions with external dependencies. AWS Serverless Application Model (AWS SAM) takes care of building and packaging lambda function with external dependencies out of the box. It was not possible this with AWS CDK until s3-assets was introduced.","title":" cdk-lambda-packaging-java"},{"location":"code/#aws-ag-client","text":"This Java repo demonstrates how to make IAM authenticated call to AWS api gateway endpoint. It is set up as a maven project currently and uses the AWS java SDK under the hood to provide simple wrapper classes to make these calls.","title":" aws-ag-client"}]}